{"ast":null,"code":"var _jsxFileName = \"/Users/neo/Desktop/projects/Z/skore/src/game/ss7/Ss7R.js\";\nimport React, { useState } from 'react'; //import Game from '../../shared/pages/Game'\n\nimport './Ss7R.css';\nimport Gamer from '../../shared/components/Gamer';\n\nconst Ss7R = props => {\n  const [gameState, setGameState] = useState({\n    players: [//for each selected player this...\n    {\n      id: 'p1',\n      name: props.selected[0],\n      skore: 0\n    }, {\n      id: 'p2',\n      name: props.selected[1],\n      skore: 0\n    }, {\n      id: 'p3',\n      name: props.selected[2],\n      skore: 0\n    }]\n  });\n  const [winner, setWinner] = useState({\n    player: \"acetone7\",\n    skore: 0\n  });\n  const [gameRound, setGameRound] = useState(1);\n  const [end, setEnd] = useState(false);\n\n  const onSubmitHandler = e => {\n    e.preventDefault(); //console.log(\"was submitted update skore with setState\")\n\n    if (gameRound === 1 || gameState.round === 7) {\n      alert(\"double score flag\");\n    }\n\n    if (gameRound === 7) {\n      //alert(\"end of series flag\")\n      setEnd(true); //alert(\"print winner with least score\")\n    } //check flags and do for now open\n\n\n    if (!end) {\n      //total the scores and add a round\n      setGameState({\n        players: [//for each selected player this...\n        {\n          id: 'p1',\n          name: \"acetone7\",\n          skore: gameState.players[0].skore\n        }, {\n          id: 'p2',\n          name: \"anu\",\n          skore: gameState.players[1].skore\n        }, {\n          id: 'p3',\n          name: \"roopa\",\n          skore: gameState.players[2].skore\n        }]\n      });\n      setGameRound(gameRound + 1);\n    }\n  };\n\n  const updateSkores = e => {\n    const f = e.target.id;\n    const g = e.target.value;\n    console.log(\"f=: \", f, \" g=: \", g);\n    let tempArray = []; //store the updated list of skores\n\n    gameState.players.map(player => {\n      //for each player push the skore to a new temp array\n      if (player.id === f) {\n        let total = int(g) + int(player.skore);\n        tempArray.push(total);\n      } else {\n        //add old skore itself\n        tempArray.push(player.skore);\n      }\n    });\n    setGameState({\n      players: [//for each selected player this...\n      {\n        id: 'p1',\n        name: \"acetone7\",\n        skore: tempArray[0]\n      }, {\n        id: 'p2',\n        name: \"anu\",\n        skore: tempArray[1]\n      }, {\n        id: 'p3',\n        name: \"roopa\",\n        skore: tempArray[2]\n      }]\n    });\n  };\n\n  if (!end) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: onSubmitHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"round_num\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 21\n      }\n    }, \"game \", gameRound), /*#__PURE__*/React.createElement(Gamer, {\n      id: gameState.players[0].id,\n      name: gameState.players[0].name,\n      skore: gameState.players[0].skore,\n      changed: updateSkores,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(Gamer, {\n      id: gameState.players[1].id,\n      name: gameState.players[1].name,\n      skore: gameState.players[1].skore,\n      changed: updateSkores,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(Gamer, {\n      id: gameState.players[2].id,\n      name: gameState.players[2].name,\n      skore: gameState.players[2].skore,\n      changed: updateSkores,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"submit\",\n      className: \"game-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }\n    }, \"NEXT\")));\n  } else {\n    let least_skore = winner.skore;\n    let least_player = winner.player;\n    gameState.players.map(player => {\n      if (player.skore < least_skore) {\n        least_skore = player.skore;\n        least_player = player.name;\n      }\n    });\n    setWinner({\n      player: least_player,\n      skore: least_skore\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"round_num\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }\n    }, \"end of series\"), /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }\n    }, \"winner is \", winner.player, \" with \", winner.skore, \" points\"));\n  }\n};\n\nexport default Ss7R;","map":{"version":3,"sources":["/Users/neo/Desktop/projects/Z/skore/src/game/ss7/Ss7R.js"],"names":["React","useState","Gamer","Ss7R","props","gameState","setGameState","players","id","name","selected","skore","winner","setWinner","player","gameRound","setGameRound","end","setEnd","onSubmitHandler","e","preventDefault","round","alert","updateSkores","f","target","g","value","console","log","tempArray","map","total","int","push","least_skore","least_player"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\n\n//import Game from '../../shared/pages/Game'\nimport './Ss7R.css';\nimport Gamer from '../../shared/components/Gamer'\n\n\nconst Ss7R = props => {\n    const [ gameState, setGameState ] = useState({\n        players: [\n            //for each selected player this...\n            {id: 'p1', name: props.selected[0], skore: 0 },\n            {id: 'p2', name: props.selected[1], skore: 0 },\n            {id: 'p3', name: props.selected[2], skore: 0 }\n        ]\n    })\n    const [ winner, setWinner ] = useState({\n        player: \"acetone7\",\n        skore: 0\n    })\n    const [ gameRound, setGameRound ] = useState(1)\n    const [ end, setEnd ] = useState(false)\n\n    const onSubmitHandler = e => {\n        e.preventDefault()\n        //console.log(\"was submitted update skore with setState\")\n        if(gameRound === 1 || gameState.round === 7){\n            alert(\"double score flag\")\n        }\n        if(gameRound === 7){\n            //alert(\"end of series flag\")\n            setEnd(true)\n            //alert(\"print winner with least score\")\n\n        }\n        //check flags and do for now open\n        if(!end){\n            //total the scores and add a round\n            setGameState({\n                players: [\n                    //for each selected player this...\n                    {id: 'p1', name: \"acetone7\", skore: gameState.players[0].skore },\n                    {id: 'p2', name: \"anu\", skore: gameState.players[1].skore },\n                    {id: 'p3', name: \"roopa\", skore: gameState.players[2].skore }\n                ]\n            })\n            setGameRound(gameRound+1)\n        }\n    }\n    const updateSkores = (e) => {\n        const f=e.target.id\n        const g=e.target.value\n        console.log(\"f=: \", f,\" g=: \", g)\n        let tempArray = [] //store the updated list of skores\n        gameState.players.map(player => {\n            //for each player push the skore to a new temp array\n            if (player.id === f){\n                let total = int(g)+int(player.skore)\n                tempArray.push(total)  \n            }\n            else{\n                //add old skore itself\n                tempArray.push(player.skore)\n            }\n        })\n        setGameState({\n            players: [\n                //for each selected player this...\n                {id: 'p1', name: \"acetone7\", skore: tempArray[0] },\n                {id: 'p2', name: \"anu\", skore: tempArray[1] },\n                {id: 'p3', name: \"roopa\", skore: tempArray[2] }\n            ]\n        })\n\n    }\n    if(!end){\n        return (\n            <div className=\"game-container\">\n                <form onSubmit={onSubmitHandler}>\n    \n                    <h4 className=\"round_num\">game {gameRound}</h4>\n                    <Gamer id={gameState.players[0].id} name={gameState.players[0].name} skore={gameState.players[0].skore} changed={updateSkores} />\n                    <Gamer id={gameState.players[1].id} name={gameState.players[1].name} skore={gameState.players[1].skore} changed={updateSkores} />\n                    <Gamer id={gameState.players[2].id} name={gameState.players[2].name} skore={gameState.players[2].skore} changed={updateSkores} />\n                <button type=\"submit\" className=\"game-button\" >NEXT</button>\n                </form>\n            </div>\n        )\n    }\n    else{\n        let least_skore = winner.skore\n        let least_player = winner.player\n        gameState.players.map(player => {\n            if (player.skore < least_skore){\n                least_skore = player.skore\n                least_player = player.name\n            }\n        })\n        setWinner({\n            player: least_player,\n            skore: least_skore\n        })\n        return (\n            <div className=\"game-container\">\n                <h4 className=\"round_num\">end of series</h4>\n\n                <h2>winner is {winner.player} with {winner.skore} points</h2>\n            </div>\n        )\n    }\n    \n}\n\n\nexport default Ss7R;\n\n\n"]},"metadata":{},"sourceType":"module"}